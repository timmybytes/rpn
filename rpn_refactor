#!/usr/bin/env bash
# title          :rpn.sh
# description    :A Reverse Polish Notation calculator
# author         :Timothy Merritt
# date           :2020-11-17
# version        :0.1.0
# usage          :./rpn.sh
# bash_version   :5.0.18(1)-release
#=========================================================

# Copy command-line arguments over to new array
VERSION=0.0.1
ARGS=($@)
STACK=()
NUM="[-+]?[0-9]*\.?[0-9]+"

if [ ${#STACK[@]} -eq 0 ]; then
  PROMPT="${STACK[@]}> "
elif ! [ ${#STACK[@]} -eq 0 ]; then
  PROMPT="${STACK[@]} > "
fi

function intro() {
  local txt=(

  )
  printf "%s\n" "${txt[@]}"
}

function short_help() {
  local txt=(
    "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    "‚îÇ                  rpn v0.0.1                 ‚îÇ"
    "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    ""
    "Add numbers to the stack separated by a space"
    ""
    "VALID OPERATORS"
    "  + : Add the first two numbers in the stack"
    "      together."
    "  - : Subtract the second number in the stack"
    "      from the first."
    "  ^ : Multiple the first number in the stack"
    "      by the second. Substituted for '*'."
    "  / : Divide the first number in the stack"
    "      by the second."
    ""
    "USAGE:"
    "  rpn "
    "  Start in interactive mode (default) "
    ""
    "  rpn [expression]"
    "  Evaluate expression "
    ""
    "  rpn [-option] [expression] "
    "  Evaluate expression with options "
    ""
    "OPTIONS"
    "  rpn [-v]"
    "  Start in verbose mode"
    ""
    "  rpn [-h] "
    "  Show basic usage "
    ""
    "  rpn [-help]"
    "  Show full help file "
    ""
  )
  printf "%s\n" "${txt[@]}"
}

function clear_stack() {
  STACK=()
  PROMPT="${STACK[@]}> "
}

function is_number() {
  # Trim leading and extranneous 0s
  strip="${1#"${1%%[!0]*}"}"
  if [[ "${strip}" =~ "0" ]]; then
    shift
  fi &&
    if [[ "${strip}" =~ $NUM ]]; then
      # strip=$(echo $strip 2>/dev/null | tr -dc "0-9.")
      strip=$(printf "$strip") # sed 's/[^1-9.0-9]//g'
      STACK+=("${strip}") || STACK+=("${1}")
      PROMPT="${STACK[@]} > "
    fi
}

function calc() {
  op=$1
  int_1=${STACK[0]}
  int_2=${STACK[1]}
  if [ "$op" = "^" ]; then
    op="*"
  fi
  result=$(echo "${int_1} $op ${int_2}" | bc -l 2>/dev/null | sed '/\./ s/\.\{0,1\}0\{1,\}$//')
  STACK=("${STACK[@]:2}")
  STACK=($result "${STACK[@]}")
  PROMPT="${STACK[@]} > "
}

function check_stack() {
  if [ "${#STACK[@]}" -lt "2" ] && [ "$1" != "++" ] && [ "$1" != "--" ]; then
    echo -e "${RED}êÑÇ ERROR${BASE}: ${1} cannot be performed on a single number."
  else
    calc "$1"
  fi
}

function round() {
  printf -v rounded "%.*f\n" "0" "${STACK[0]}"
  echo "$rounded"
  # STACK=("${STACK[@]:0}")
  STACK=($rounded "${STACK[@]}")
  # shift
}

function parse_input() {
  while [[ "$#" -gt 0 ]]; do
    key="$1"
    is_number "$key"
    case $key in
    "q" | "quit" | "exit")
      exit 0
      ;;
    "h")
      short_help
      shift
      ;;
    "clr")
      clear_stack
      shift
      ;;
    "+" | "-" | "^" | "/" | "%")
      check_stack "$key"
      shift
      ;;
    "round")
      echo "Rounding"
      round
      shift
      ;;
    *)
      shift
      ;;
    esac
  done
}

function get_input() {
  #=========================================================
  # Read in from piped input, if present, and append to
  # newly-created array
  if [ ! -t 0 ]; then
    readarray STDIN_ARGS </dev/stdin
    ARGS=($@ ${STDIN_ARGS[@]})
  fi
  # Single loop to process all arguments
  for ARG in "${ARGS[@]}"; do
    is_number $ARG
  done
  # If piped input, print only final STACK after
  if [ ! -t 0 ]; then
    echo "${STACK[@]}"
  fi
  #=========================================================
  PROMPT="${STACK[@]}> "
  while read -p "${PROMPT}" INPUT; do
    parse_input $INPUT
  done
}

while getopts ":hiv" arg; do
  case ${arg} in
  h)
    short_help
    exit 0
    ;;
  i)
    echo "Interactive Mode"
    ;;
  v)
    intro
    ;;
  ?)
    # get_input
    echo "Invalid option: -${OPTARG}"
    ;;
  esac
done

get_input
