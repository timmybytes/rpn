Usage:
  nvim [options] [file ...]      Edit file(s)
  nvim [options] -t <tag>        Edit file where tag is defined
  nvim [options] -q [errorfile]  Edit file with first error

Options:
  --                    Only file names after this
  +                     Start at end of file
  --cmd <cmd>           Execute <cmd> before any config
  +<cmd>, -c <cmd>      Execute <cmd> after config and first file

  -b                    Binary mode
  -d                    Diff mode
  -e, -E                Ex mode
  -es, -Es              Silent (batch) mode
  -h, --help            Print this help message
  -i <shada>            Use this shada file
  -m                    Modifications (writing files) not allowed
  -M                    Modifications in text not allowed
  -n                    No swap file, use memory only
  -o[N]                 Open N windows (default: one per file)
  -O[N]                 Open N vertical windows (default: one per file)
  -p[N]                 Open N tab pages (default: one per file)
  -r, -L                List swap files
  -r <file>             Recover edit state for this file
  -R                    Read-only mode
  -S <session>          Source <session> after loading the first file
  -s <scriptin>         Read Normal mode commands from <scriptin>
  -u <config>           Use this config file
  -v, --version         Print version information
  -V[N][file]           Verbose [level][file]
  -Z                    Restricted mode

  --api-info            Write msgpack-encoded API metadata to stdout
  --embed               Use stdin/stdout as a msgpack-rpc channel
  --headless            Don't start a user interface
  --listen <address>    Serve RPC API from this address
  --noplugin            Don't load plugins
  --startuptime <file>  Write startup timing messages to <file>

See ":help startup-options" for all options.


#########################################

                   rpn - Reverse Polish Notation Calculator
                                    v0.1.0



"q" | "Q" | "quit" | "exit")
      exit
      ;;
    "swap")
      temp="${STACK[0]}"
      temp2="${STACK[1]}"
      STACK=("${STACK[@]:2}")
      STACK=(${STACK[@]:0:0} $temp ${STACK[@]:0})
      STACK=(${STACK[@]:0:0} $temp2 ${STACK[@]:0})
      shift
      ;;
    "round")
      # FIXME: Inconsistent rounding/popping
      if [ -t "$ARG" ]; then
        printf -v rounded "%.*f\n" "$ARG" "${STACK[0]}"
        STACK=("${STACK[@]:2}")
        STACK=($rounded "${STACK[@]}")
        shift
      else
        # FIXME: Need coherent help pop-ups
        # helpers_round
        # round defaults to 0 decimal points
        printf -v rounded "%.*f\n" "0" "${STACK[0]}"
        STACK=("${STACK[@]:0}")
        STACK=($rounded "${STACK[@]}")
        shift
      fi
      ;;
    "fac")
      factorial=1
      for ((i = 1; i <= "${STACK[0]}"; i++)); do
        factorial=$(($factorial * $i))
      done
      STACK=("${STACK[@]:1}")
      STACK=(${STACK[@]:0:0} $factorial ${STACK[@]:0})
      shift
      ;;
    "drop")
      delete=$ARG
      for target in "${delete[@]}"; do
        for i in "${!STACK[@]}"; do
          if [[ ${STACK[i]} = $target ]]; then
            unset 'STACK[i]'
          fi
        done
      done
      shift
      ;;
    "bin")
      echo "$ARG"
      binary=$(echo "obase=2;${STACK[0]}" | bc)
      STACK=("${STACK[@]:1}")
      STACK=($binary "${STACK[@]}")
      shift
      ;;
    "dec")
      decimal=$(echo "ibase=2;${STACK[0]}" | bc)
      STACK=("${STACK[@]:2}")
      STACK=($decimal "${STACK[@]}")
      shift
      ;;
    "usage")
      usage
      shift
      ;;
    "v" | "-v" | "--version" | "version")
      version
      shift
      ;;
    "clr")
      clear_stack
      shift
      ;;
    "+" | "-" | "^" | "/" | "%")
      check_stack
      shift
      ;;
      # FIXME:
    "++" | "--")
      check_stack "$key"
      shift
      ;;
    "help")
      less ./HELP
      shift
      ;;
