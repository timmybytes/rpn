#!/usr/bin/env bash
# title          :rpn.sh
# description    :A Reverse Polish Notation calculator
# author         :Timothy Merritt
# date           :2020-11-17
# version        :0.1.0
# usage          :./rpn.sh
# bash_version   :5.0.18(1)-release
#============================================================================

# TODO:
# * help text
# * getopts
# * move
# * drop
# * dupl
# * sqrt
# * pi
# ----------------
# * customizations

#  -e  Exit immediately if a command exits with a non-zero status.
# set -e
# Instead...
# trap 'do_something' ERR
# set -u
set -o pipefail

source ./INFO
source ./.rpnrc

function is_number() {
  # Trim leading and extranneous 0s
  strip="${1#"${1%%[!0]*}"}"
  if [[ "${strip}" =~ "0" ]]; then
    shift
  fi &&
    if [[ "${strip}" =~ $num ]]; then
      # DONE Strip special characters, preserve floats
      strip=$(echo $strip 2>/dev/null | tr -dc "0-9.")
      STACK+=("${strip}") || STACK+=("${1}")
      shift
    fi
}

function bin() {
  # Translate 1st number in stack to binary
  binary=$(echo "obase=2;${STACK[0]}" | bc)
  STACK=("${STACK[@]:1}")
  STACK=($binary "${STACK[@]}")
}

function calc() {
  op=$1
  int_1=${STACK[0]}
  int_2=${STACK[1]}
  # FIXME: ++ & -- should not replace first two digits, only first
  if [ "$op" = "^" ]; then
    op="*"
  # FIXME: Either/Or for ++/-- only removing STACK=("${STACK[@]:1}") instead of 2
  elif [ "$op" = "++" ]; then
    op="+"
    int_2="1"
  elif [ "$op" = "--" ]; then
    op="-"
    int_2="1"
  fi
  result=$(echo "${int_1} $op ${int_2}" | bc -l 2>/dev/null | sed '/\./ s/\.\{0,1\}0\{1,\}$//')
  STACK=("${STACK[@]:2}")
  STACK=($result "${STACK[@]}")
}

function check_stack() {
  if [ "${#STACK[@]}" -lt "2" ] && [ "$1" != "++" ] && [ "$1" != "--" ]; then
    # FIXME: Need coherent help pop-ups
    echo -e "${RED}êÑÇ ERROR${BASE}: ${1} cannot be performed on a single number."
    echo "  Type 'help' or 'usage' for more information."
    echo
  else
    calc "$1"
  fi
}

function clear_stack() {
  unset STACK
}

function parse_input() {
  while [[ "$#" -gt 0 ]]; do
    # key="$1"
    is_number "$1"
    case $1 in
    "q" | "Q" | "quit" | "exit")
      exit
      ;;
    "swap")
      temp="${STACK[0]}"
      temp2="${STACK[1]}"
      STACK=("${STACK[@]:2}")
      STACK=(${STACK[@]:0:0} $temp ${STACK[@]:0})
      STACK=(${STACK[@]:0:0} $temp2 ${STACK[@]:0})
      shift
      ;;
    "round")
      # # FIXME: Inconsistent rounding/popping
      # shift
      # if [ -t "$1" ]; then
      #   printf -v rounded "%.*f\n" "$1" "${STACK[0]}"
      #   STACK=("${STACK[@]:2}")
      #   STACK=($rounded "${STACK[@]}")
      #   shift
      # else
      #   # FIXME: Need coherent help pop-ups
      #   # helpers_round
      #   # round defaults to 0 decimal points
      #   printf -v rounded "%.*f\n" "0" "${STACK[0]}"
      #   STACK=("${STACK[@]:0}")
      #   STACK=($rounded "${STACK[@]}")
      #   shift
      # fi
      # shift
      if [ -t "$2" ]; then
        echo "$2"
      else
        echo "arg empty"
      fi
      shift
      ;;
    "fac")
      factorial=1
      for ((i = 1; i <= "${STACK[0]}"; i++)); do
        factorial=$(($factorial * $i))
      done
      STACK=("${STACK[@]:1}")
      STACK=(${STACK[@]:0:0} $factorial ${STACK[@]:0})
      shift
      ;;
    "drop")
      # delete=$ARG
      for target in "${delete[@]}"; do
        for i in "${!STACK[@]}"; do
          if [[ ${STACK[i]} = $target ]]; then
            unset 'STACK[i]'
          fi
        done
      done
      shift
      ;;
    "bin")
      shift
      ;;
    "dec")
      decimal=$(echo "ibase=2;${STACK[0]}" | bc)
      STACK=("${STACK[@]:1}")
      STACK=($decimal "${STACK[@]}")
      shift
      ;;
    "usage")
      usage
      shift
      ;;
    "v" | "-v" | "--version" | "version")
      version
      shift
      ;;
    "clr")
      clear_stack
      shift
      ;;
    "+" | "-" | "^" | "/" | "%")
      check_stack
      shift
      ;;
      # FIXME:
    "++" | "--")
      check_stack "$1"
      shift
      ;;
    "help")
      less ./HELP
      shift
      ;;
    *)
      shift
      ;;
    esac
  done
}

function rpn() {
  # For piped input
  if [ -p /dev/stdin ]; then
    while read piped; do
      parse_input $piped && echo -e "${STACK[@]}"
    done
  else
    # For arguments
    for i in $@; do
      # read $i
      parse_input $i
    done
    # For regular usage
    echo -en "${STACK[@]}" "> "
    # FIXME: Breaks more than 2 inputs at a time
    if [ "$?" = 2 ]; then
      while read -r INPUT ARG; do
        ARG=$ARG
        parse_input $INPUT && echo -en "${STACK[@]}" "> "
      done
    else
      # FIXME:
      while read -r INPUT; do
        # ARG=$ARG
        parse_input $INPUT && echo -en "${STACK[@]}" "> "
      done
    fi
  fi
}

rpn $@
